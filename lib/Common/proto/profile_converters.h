#ifndef PROFILE_CONVERTERS_H
#define PROFILE_CONVERTERS_H

#include "profiling_phases.h"
#include "nanopb_cpp.h"
#include "profile.pb.h"

/**
  * The below classes are converters that map our own classes to/from protobuf objects.
  * The protobuf objects are autogenerated at build time  based on the *.proto definition files
  * (see settings.proto and profile.proto).
  */
class PhaseTypeConverter : public NanoPb::Converter::EnumConverter<PhaseTypeConverter, PhaseType, PhaseTypeDto> {
public:
  static ProtoType encode(const LocalType& local) {
    switch (local) {
    case PhaseType::FLOW: return PhaseTypeDto::PhaseTypeDto_FLOW;
    case PhaseType::PRESSURE: return PhaseTypeDto::PhaseTypeDto_PRESSURE;
    }
    return PhaseTypeDto::PhaseTypeDto_PRESSURE;
  };

  static LocalType decode(const ProtoType& proto) {
    switch (proto) {
    case PhaseTypeDto::PhaseTypeDto_FLOW: return PhaseType::FLOW;
    case PhaseTypeDto::PhaseTypeDto_PRESSURE: return PhaseType::PRESSURE;
    }
    return PhaseType::PRESSURE;
  };
};

class TransitionCurveConverter : public NanoPb::Converter::EnumConverter<TransitionCurveConverter, TransitionCurve, TransitionCurveDto> {
public:
  static ProtoType encode(const LocalType& local) {
    switch (local) {
    case TransitionCurve::LINEAR: return TransitionCurveDto::TransitionCurveDto_LINEAR;
    case TransitionCurve::EASE_IN: return TransitionCurveDto::TransitionCurveDto_EASE_IN;
    case TransitionCurve::EASE_OUT: return TransitionCurveDto::TransitionCurveDto_EASE_OUT;
    case TransitionCurve::EASE_IN_OUT: return TransitionCurveDto::TransitionCurveDto_EASE_IN_OUT;
    case TransitionCurve::INSTANT: return TransitionCurveDto::TransitionCurveDto_INSTANT;
    }
    return TransitionCurveDto::TransitionCurveDto_LINEAR;
  };

  static LocalType decode(const ProtoType& proto) {
    switch (proto) {
    case TransitionCurveDto::TransitionCurveDto_LINEAR: return TransitionCurve::LINEAR;
    case TransitionCurveDto::TransitionCurveDto_EASE_IN: return TransitionCurve::EASE_IN;
    case TransitionCurveDto::TransitionCurveDto_EASE_OUT: return TransitionCurve::EASE_OUT;
    case TransitionCurveDto::TransitionCurveDto_EASE_IN_OUT: return TransitionCurve::EASE_IN_OUT;
    case TransitionCurveDto::TransitionCurveDto_INSTANT: return TransitionCurve::INSTANT;
    }
    return TransitionCurve::LINEAR;
  };
};

class PhaseConverter : public NanoPb::Converter::MessageConverter<PhaseConverter, Phase, PhaseDto, &PhaseDto_msg> {
public:
  static ProtoType encoderInit(const LocalType& local) {
    return PhaseDto{
      .type = PhaseTypeConverter::encode(local.type),
      .has_target = true,
      .target = TransitionDto {
        .start = local.target.start,
        .end = local.target.end,
        .curve = TransitionCurveConverter::encode(local.target.curve),
        .time = local.target.time,
      },
      .restriction = local.restriction,
      .has_stopConditions = true,
      .stopConditions = PhaseStopConditionsDto {
        .time = local.stopConditions.time,
        .pressureAbove = local.stopConditions.pressureAbove,
        .pressureBelow = local.stopConditions.pressureBelow,
        .flowAbove = local.stopConditions.flowAbove,
        .flowBelow = local.stopConditions.flowBelow,
        .weight = local.stopConditions.weight,
        .waterPumpedInPhase = local.stopConditions.waterPumpedInPhase,
      },
      .waterTemperature = local.waterTemperature,
      .name = NanoPb::Converter::StringConverter::encoderInit(local.name),
      .skip = local.skip,
    };
  };

  static ProtoType decoderInit(LocalType& local) {
    return ProtoType{
      .name = NanoPb::Converter::StringConverter::decoderInit(local.name),
    };
  };

  static bool decoderApply(const ProtoType& proto, LocalType& local) {
    local.type = PhaseTypeConverter::decode(proto.type);
    local.restriction = proto.restriction;
    local.target.start = proto.target.start;
    local.target.end = proto.target.end;
    local.target.curve = TransitionCurveConverter::decode(proto.target.curve);
    local.target.time = proto.target.time;
    local.stopConditions.time = proto.stopConditions.time;
    local.stopConditions.pressureAbove = proto.stopConditions.pressureAbove;
    local.stopConditions.pressureBelow = proto.stopConditions.pressureBelow;
    local.stopConditions.flowAbove = proto.stopConditions.flowAbove;
    local.stopConditions.flowBelow = proto.stopConditions.flowBelow;
    local.stopConditions.weight = proto.stopConditions.weight;
    local.stopConditions.waterPumpedInPhase = proto.stopConditions.waterPumpedInPhase;
    local.waterTemperature = proto.waterTemperature;
    local.skip = proto.skip;
    return true;
  };
};

class ProfileConverter : public NanoPb::Converter::MessageConverter<ProfileConverter, Profile, ProfileDto, ProfileDto_fields> {
public:
  using PhaseArrayConverter = NanoPb::Converter::ArrayConverter<PhaseConverter, std::vector<Phase>>;

  static ProtoType encoderInit(const LocalType& local) {
    return ProfileDto{
      .name = NanoPb::Converter::StringConverter::encoderInit(local.name),
      .phases = PhaseArrayConverter::encoderCallbackInit(local.phases),
      .has_globalStopConditions = true,
      .globalStopConditions = GlobalStopConditionsDto {
        .time = local.globalStopConditions.time,
        .weight = local.globalStopConditions.weight,
        .waterPumped = local.globalStopConditions.waterPumped,
      },
      .waterTemperature = local.waterTemperature,
      .has_recipe = true,
      .recipe = BrewRecipeDto {
        .coffeeIn = local.recipe.coffeeIn,
        .coffeeOut = local.recipe.coffeeOut,
        .ratio = local.recipe.ratio,
      },
    };
  };

  static ProtoType decoderInit(LocalType& local) {
    return ProfileDto{
      .name = NanoPb::Converter::StringConverter::decoderInit(local.name),
      .phases = PhaseArrayConverter::decoderCallbackInit(local.phases),
    };
  };

  static bool decoderApply(const ProtoType& proto, LocalType& local) {
    local.globalStopConditions.time = proto.globalStopConditions.time;
    local.globalStopConditions.weight = proto.globalStopConditions.weight;
    local.globalStopConditions.waterPumped = proto.globalStopConditions.waterPumped;
    local.waterTemperature = proto.waterTemperature;
    local.recipe.coffeeIn = proto.recipe.coffeeIn;
    local.recipe.coffeeOut = proto.recipe.coffeeOut;
    local.recipe.ratio = proto.recipe.ratio;
    return true;
  };
};
#endif

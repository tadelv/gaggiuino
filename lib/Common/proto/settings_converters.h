#ifndef SETTINGS_CONVERTERS_H
#define SETTINGS_CONVERTERS_H

#include "gaggia_settings.h"
#include "nanopb_cpp.h"
#include "settings.pb.h"

using namespace NanoPb::Converter;

/**
  * The below classes are converters that map our own classes to/from protobuf objects.
  * The protobuf objects are autogenerated at build time  based on the *.proto definition files
  * (see settings.proto and profile.proto).
  */

class BoilerSettingsConverter : public NanoPb::Converter::MessageConverter<BoilerSettingsConverter, BoilerSettings, BoilerSettingsDto, BoilerSettingsDto_fields> {
public:
  static ProtoType encoderInit(const LocalType& local) {
    return BoilerSettingsDto{
      .steamSetPoint = local.steamSetPoint,
      .offsetTemp = local.offsetTemp,
      .hpwr = local.hpwr,
      .mainDivider = local.mainDivider,
      .brewDivider = local.brewDivider,
    };
  };

  static ProtoType decoderInit(LocalType& local) {
    return BoilerSettingsDto{};
  };

  static bool decoderApply(const ProtoType& proto, LocalType& local) {
    local.steamSetPoint = proto.steamSetPoint;
    local.offsetTemp = proto.offsetTemp;
    local.hpwr = proto.hpwr;
    local.mainDivider = proto.mainDivider;
    local.brewDivider = proto.brewDivider;
    return true;
  };
};

class LedSettingsConverter : public NanoPb::Converter::MessageConverter<LedSettingsConverter, LedSettings, LedSettingsDto, LedSettingsDto_fields> {
public:
  static ProtoType encoderInit(const LocalType& local) {
    return LedSettingsDto{
      .state = local.state,
      .has_color = true,
      .color = LedSettingsDto_Color {
        .R = local.color.R,
        .G = local.color.G,
        .B = local.color.B,
      },
      .disco = local.disco,
    };
  };

  static ProtoType decoderInit(LocalType& local) {
    return LedSettingsDto{};
  };

  static bool decoderApply(const ProtoType& proto, LocalType& local) {
    local.state = proto.state;
    local.color.R = proto.color.R;
    local.color.G = proto.color.G;
    local.color.B = proto.color.B;
    local.disco = proto.disco;
    return true;
  };
};

class SystemSettingsConverter : public NanoPb::Converter::MessageConverter<SystemSettingsConverter, SystemSettings, SystemSettingsDto, SystemSettingsDto_fields> {
public:
  static ProtoType encoderInit(const LocalType& local) {
    return SystemSettingsDto{
      .pumpFlowAtZero = local.pumpFlowAtZero,
      .lcdSleep = local.lcdSleep,
      .warmupState = local.warmupState,
    };
  };

  static ProtoType decoderInit(LocalType& local) {
    return SystemSettingsDto{};
  };

  static bool decoderApply(const ProtoType& proto, LocalType& local) {
    local.pumpFlowAtZero = proto.pumpFlowAtZero;
    local.warmupState = proto.warmupState;
    local.lcdSleep = proto.lcdSleep;
    return true;
  };
};

class BrewSettingsConverter : public NanoPb::Converter::MessageConverter<BrewSettingsConverter, BrewSettings, BrewSettingsDto, BrewSettingsDto_fields> {
public:
  static ProtoType encoderInit(const LocalType& local) {
    return BrewSettingsDto{
      .homeOnShotFinish = local.homeOnShotFinish,
      .brewDeltaState = local.brewDeltaState,
      .basketPrefill = local.basketPrefill,
    };
  };

  static ProtoType decoderInit(LocalType& local) {
    return BrewSettingsDto{};
  };

  static bool decoderApply(const ProtoType& proto, LocalType& local) {
    local.homeOnShotFinish = proto.homeOnShotFinish;
    local.brewDeltaState = proto.brewDeltaState;
    local.basketPrefill = proto.basketPrefill;

    return true;
  };
};

class ScalesSettingsConverter : public NanoPb::Converter::MessageConverter<ScalesSettingsConverter, ScalesSettings, ScalesSettingsDto, ScalesSettingsDto_fields> {
public:
  static ProtoType encoderInit(const LocalType& local) {
    return ScalesSettingsDto{
      .forcePredictive = local.forcePredictive,
      .hwScalesEnabled = local.hwScalesEnabled,
      .hwScalesF1 = local.hwScalesF1,
      .hwScalesF2 = local.hwScalesF2,
      .btScalesEnabled = local.btScalesEnabled,
      .btScalesAutoConnect = local.btScalesAutoConnect,
    };
  };

  static ProtoType decoderInit(LocalType& local) {
    return ScalesSettingsDto{};
  };

  static bool decoderApply(const ProtoType& proto, LocalType& local) {
    local.forcePredictive = proto.forcePredictive;
    local.hwScalesEnabled = proto.hwScalesEnabled;
    local.hwScalesF1 = proto.hwScalesF1;
    local.hwScalesF2 = proto.hwScalesF2;
    local.btScalesEnabled = proto.btScalesEnabled;
    local.btScalesAutoConnect = proto.btScalesAutoConnect;

    return true;
  };
};

class GaggiaSettingsConverter : public NanoPb::Converter::MessageConverter<GaggiaSettingsConverter, GaggiaSettings, GaggiaSettingsDto, GaggiaSettingsDto_fields> {
public:
  static ProtoType encoderInit(const LocalType& local) {
    return GaggiaSettingsDto{
      .has_boiler = true,
      .boiler = BoilerSettingsConverter::encoderInit(local.boiler),
      .has_system = true,
      .system = SystemSettingsConverter::encoderInit(local.system),
      .has_brew = true,
      .brew = BrewSettingsConverter::encoderInit(local.brew),
      .has_led = true,
      .led = LedSettingsConverter::encoderInit(local.led),
      .has_scales = true,
      .scales = ScalesSettingsConverter::encoderInit(local.scales),
    };
  };

  static ProtoType decoderInit(LocalType& local) {
    return GaggiaSettingsDto{
      .boiler = BoilerSettingsConverter::decoderInit(local.boiler),
      .system = SystemSettingsConverter::decoderInit(local.system),
      .brew = BrewSettingsConverter::decoderInit(local.brew),
      .led = LedSettingsConverter::decoderInit(local.led),
      .scales = ScalesSettingsConverter::decoderInit(local.scales),
    };
  };

  static bool decoderApply(const ProtoType& proto, LocalType& local) {
    BoilerSettingsConverter::decoderApply(proto.boiler, local.boiler);
    SystemSettingsConverter::decoderApply(proto.system, local.system);
    BrewSettingsConverter::decoderApply(proto.brew, local.brew);
    LedSettingsConverter::decoderApply(proto.led, local.led);
    ScalesSettingsConverter::decoderApply(proto.scales, local.scales);

    if (proto.system.scalesF1 != 0 && local.scales.hwScalesF1 == 0) local.scales.hwScalesF1 = proto.system.scalesF1;
    if (proto.system.scalesF2 != 0 && local.scales.hwScalesF2 == 0) local.scales.hwScalesF2 = proto.system.scalesF2;

    return true;
  };
};

#endif
